buildscript {
    ext {
        springBootVersion = '3.1.7'
        //oracleVersion = '11.2.0.4'
        notifyVersion = '3.17.3-RELEASE'
        springDocVersion = '2.2.0'
        queryDslVersion = '5.0.0'
        flywayVersion = '10.4.1'
        postgresVersion = '42.7.2'
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.postgresql:postgresql:${postgresVersion}")
        classpath("org.flywaydb:flyway-database-postgresql:${flywayVersion}")
    }
}

plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id "org.flywaydb.flyway" version "${flywayVersion}"
    id "com.dorongold.task-tree" version "1.3.1"
    id 'org.cyclonedx.bom' version '1.4.1'
    id 'org.owasp.dependencycheck' version '8.4.3'
    id 'checkstyle'
    id 'pmd'
    id 'com.github.ben-manes.versions' version '0.47.0'
    id 'org.sonarqube' version '4.4.1.3373'

//      id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
//      id 'io.franzbecker.gradle-lombok' version '5.0.0'
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'io.spring.dependency-management'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" //<< "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

bootJar {
    archiveFileName = "juror-api.jar"
    manifest {
        attributes('Implementation-Version': project.version.toString())
    }
}

jacoco {
    toolVersion = "0.8.11"
}

version = '0.0.1'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

configurations {
    dev
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly

    functionalTestImplementation.extendsFrom testImplementation
    functionalTestRuntimeOnly.extendsFrom runtimeOnly

    smokeTestImplementation.extendsFrom testImplementation
    smokeTestRuntimeOnly.extendsFrom runtimeOnly

    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}

dependencies {

    //Internal dependency overrides
    implementation 'org.yaml:snakeyaml:2.2'
    implementation 'org.apache.tomcat.embed:tomcat-embed-websocket:10.1.19'
    implementation 'org.apache.tomcat.embed:tomcat-embed-core:10.1.19'
    implementation 'org.json:json:20230618'
    //
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation("org.springframework.data:spring-data-envers:${springBootVersion}")
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-json')
    //implementation("com.oracle:ojdbc6:${oracleVersion}")
    //implementation("com.oracle.database.jdbc:ojdbc11:23.2.0.0")
    implementation group: 'org.postgresql', name: 'postgresql', version: "${postgresVersion}"
    implementation "org.flywaydb:flyway-database-postgresql:${flywayVersion}"
    implementation "org.flywaydb:flyway-core:${flywayVersion}"

    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    implementation 'javax.mail:mail:1.4.7'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.2.1'

    implementation('com.google.guava:guava:31.1-jre')

    implementation('org.hibernate.orm:hibernate-core:6.3.0.CR1')

    // QueryDSL
    implementation("com.querydsl:querydsl-core:${queryDslVersion}")
    implementation("com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta")

    testImplementation 'junit:junit:4.13.2'
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:5.10.2")
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'

    annotationProcessor("com.querydsl:querydsl-apt:${queryDslVersion}:jakarta")
    annotationProcessor('jakarta.persistence:jakarta.persistence-api:3.1.0')

    implementation('org.projectlombok:lombok:1.18.30')
    annotationProcessor('org.projectlombok:lombok')

    implementation('org.apache.commons:commons-lang3:3.14.0')
    implementation('org.apache.commons:commons-text:1.11.0')
    implementation("uk.gov.service.notify:notifications-java-client:${notifyVersion}")

    runtimeOnly('org.springframework.boot:spring-boot-devtools')
    runtimeOnly(group: 'com.microsoft.azure', name: 'applicationinsights-core', version: '3.4.19')

    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocVersion}"
    implementation group: 'io.rest-assured', name: 'rest-assured'


    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.boot:spring-boot-starter-data-jpa')

    testImplementation 'org.apache.httpcomponents.client5:httpclient5:5.2.1'
    //testImplementation 'org.apache.httpcomponents:httpclient:4.5.13'
    testImplementation 'net.javacrumbs.json-unit:json-unit-fluent:2.38.0'
    testImplementation('org.assertj:assertj-core:3.23.1')
    testImplementation 'org.mockito:mockito-core:5.6.0'

    testImplementation('org.ajbrown:name-machine:1.0.0')
    testImplementation('org.projectlombok:lombok')
    testAnnotationProcessor('org.projectlombok:lombok')

    testImplementation('net.bytebuddy:byte-buddy:1.14.12')
    testImplementation('junit:junit:4.13.2')
    testImplementation "org.testcontainers:testcontainers:1.19.5"
    testImplementation "org.testcontainers:junit-jupiter:1.19.5"
    testImplementation 'org.testcontainers:postgresql:1.19.5'

    // Validation
    testImplementation 'org.wiremock:wiremock:3.2.0'
}
//
//task deleteQueryDslClasses(type: Delete) {
//    delete "src/querydsl/java"
//}
//
//task generateQueryDSL(type: JavaCompile) {
//    source = sourceSets.main.java.srcDirs
//    classpath = sourceSets.main.compileClasspath
//    getDestinationDirectory().set(file("src/querydsl/java"))
//    options.annotationProcessorPath = configurations.annotationProcessor
//    options.compilerArgs = [
//            '-proc:only',
//            '-processor',
//            'com.querydsl.apt.jpa.JPAAnnotationProcessor',
//            '-Aquerydsl.generatedAnnotationClass=com.querydsl.core.annotations.Generated'
//    ]
//}

//querydsl {
//    hibernate = true
//    jpa = true
//}
//
//compileQuerydsl {
//    options.annotationProcessorPath = configurations.querydsl
//}

sonarqube {
    properties {
        property "sonar.projectName", "Juror :: juror-api"
        property "sonar.projectKey", "uk.gov.hmcts.juror:juror-api"
        property "sonar.sources", "src"
        property "sonar.java.binaries", "build/classes"
        property "sonar.exclusions", "**/*, src/**/*"
        property "sonar.test.exclusions", "**/*, src/test/**/*"
        property "sonar.cpd.exclusions", "**/*, src/**/*"
        // property "sonar.exclusions", ".github/**,charts/**/,config/**,infrastructure/**,lib/**,gradle/**,data/*,src/querydsl/**,src/test/**,src/integration-test/**,src/main/resources/**"
        // property "sonar.cpd.exclusions", "src/main/resources/db/migration/*,src/main/java/uk/gov/hmcts/juror/api/moj/xerox/letters/*"
    }
}

bootRun {
    args = ["--spring.profiles.active=development"]
    classpath += configurations.dev
}
test {
    useJUnitPlatform()
}

tasks.withType(Test).configureEach() {

    dependsOn compileJava
    if (!System.getenv('BUILD_ID')) {
        println('NOT running in CI mode! (BUILD_ID env variable not found).')
        systemProperty "spring.profiles.active", "development,test"
    } else {
        println('Running in CI mode! (BUILD_ID env variable present).')
        systemProperty "spring.profiles.active", "development,test"
        testLogging {
            events "failed", "standard_out"
            exceptionFormat "full"
        }
    }

    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
    }

    finalizedBy(jacocoTestReport)
}

// Flyway must align with application.yml
flyway {
    def dbHost = System.getenv("DB_HOST") ?: "localhost"
    def dbPort = System.getenv("DB_PORT") ?: "5432"
    def dbName = System.getenv("DB_NAME") ?: "juror"
    def dbUserName = System.getenv("DB_USER_NAME") ?: "system"
    def dbPassword = System.getenv("DB_PASSWORD") ?: "postgres"

    url = "jdbc:postgresql://$dbHost:$dbPort/$dbName"
    user = "$dbUserName"
    password = "$dbPassword"
    schemas = ['juror', 'juror_digital', 'juror_digital_user', 'juror_dashboard', 'hk', 'juror_mod']
    defaultSchema = 'juror_mod'
    table = 'schema_history'
    cleanDisabled = false
}

springBoot {
    buildInfo {
        properties {
            additional = [
                    'phase': 'Beta Public'
            ]
        }
    }
}

task copyDocs(type: Copy, group: 'documentation') {
    from "${project.rootDir}/src/docs"
    into "${project.buildDir}/docs"
}
processResources.finalizedBy(copyDocs)


wrapper {
    gradleVersion = '8.6'
}

cyclonedxBom {

    // Currently using v 1.4.1 , so many config items are not supported, but retained below for future upgrades

    // includeConfigs is the list of configuration names to include when generating the BOM (leave empty to include every configuration)
    //includeConfigs = ["runtimeClasspath"]
    includeConfigs = ["runtimeClasspath"]
    // skipConfigs is a list of configuration names to exclude when generating the BOM
    skipConfigs += ["/src/test", "src/integration-test"]
    // skipProjects is a list of project names to exclude when generating the BOM
    //skipProjects = [rootProject.name, "yourTestSubProject"]
    // Specified the type of project being built. Defaults to 'library'
    //projectType = "application"
    // Specified the version of the CycloneDX specification to use. Defaults to 1.4.
    //schemaVersion = "1.2"
    // Boms destination directory (defaults to build/reports)
    // destination = file("build/reports")
    // The file name for the generated BOMs (before the file format suffix). Defaults to 'bom'
    //outputName = "bom"
    // The file format generated, can be xml, json or all for generating both
    //outputFormat = "json"
    // Exclude BOM Serial Number
    //includeBomSerialNumber = false
    // Override component version
    //componentVersion = "2.0.0"
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            //srcDirs 'src/querydsl/java'
        }
    }
    functionalTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/functionalTest/java')
        }
        resources.srcDir file('src/functionalTest/resources')
    }
    smokeTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/smokeTest/java')
        }
        resources.srcDir file('src/smokeTest/resources')
    }
    integrationTest {
        java {
            compileClasspath += main.output + test.output + test.compileClasspath
            runtimeClasspath += main.output + test.output + test.runtimeClasspath
            annotationProcessorPath += main.output + test.output + main.annotationProcessorPath + test.annotationProcessorPath
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

checkstyleMain {
    maxWarnings = 382
}
checkstyleTest {
    maxWarnings = 261
}
checkstyleIntegrationTest {
    maxWarnings = 1272
}
checkstyle {
    maxWarnings = 0
    toolVersion = '10.13.0'
    getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmdIntegrationTest {
    maxFailures = 801
}
pmdTest {
    maxFailures = 656
}
pmdMain {
    maxFailures = 1220
}
pmd {
    maxFailures = 0
    toolVersion = "6.55.0"
    sourceSets = [sourceSets.main, sourceSets.test, sourceSets.integrationTest,
                  sourceSets.functionalTest, sourceSets.smokeTest]
    reportsDir = file("$project.buildDir/reports/pmd")
    // https://github.com/pmd/pmd/issues/876
    ruleSets = []
    ruleSetFiles = files("config/pmd/ruleset.xml")
}

test {
    if (System.getenv('BUILD_ID')) {
        failFast = true
    }
}

task integration(type: Test) {
    useJUnitPlatform()
    description = 'Runs integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    // This forces integration tests to always run if this task is run.
    outputs.upToDateWhen { false }
    if (System.getenv('BUILD_ID')) {
        failFast = true
    }
}

task testSuite(dependsOn: [test, integration]) {
    description = 'Runs both unit tests and integration tests.'
    group = 'verification'

    // This forces the test suite to always run if this task is run.
    outputs.upToDateWhen { false }
}

task smoke(type: Test) {
    useJUnitPlatform()
    description = "Runs Smoke Tests"
    testClassesDirs = sourceSets.smokeTest.output.classesDirs
    classpath = sourceSets.smokeTest.runtimeClasspath
}

task functional(type: Test) {
    useJUnitPlatform()
    description = "Runs functional tests"
    group = "Verification"
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

jacocoTestReport {
    executionData(test, integration)
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = 10
    suppressionFile = 'config/owasp/suppressions.xml'

    analyzers {
        // Disable scanning of .NET related binaries
        assemblyEnabled = false
    }
    skipConfigurations = [
            "checkstyle",
            "compileOnly",
            "pmd",
            "integrationTest",
            "functionalTest",
            "test",
            "smokeTest",
            "contractTestRuntimeClasspath",
            "contractTestCompileClasspath"
    ]
}

project.tasks['check'].dependsOn integration
// Makes the whole test suite not run by default.
check.dependsOn -= testSuite

task runAllStyleChecks {
    dependsOn 'checkstyleMain'
    dependsOn 'checkstyleTest'
    dependsOn 'checkstyleIntegrationTest'
    dependsOn 'checkstyleSmokeTest'
    dependsOn 'checkstyleFunctionalTest'

    dependsOn 'pmdMain'
    dependsOn 'pmdTest'
    dependsOn 'pmdIntegrationTest'
    dependsOn 'pmdSmokeTest'
    dependsOn 'pmdFunctionalTest'
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
    duplicatesStrategy = 'include'
}
rootProject.tasks.named("processFunctionalTestResources") {
    duplicatesStrategy = 'include'
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
